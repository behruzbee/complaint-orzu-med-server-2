import {
  Injectable,
  InternalServerErrorException,
  Logger,
  NotFoundException,
} from '@nestjs/common';
import { InjectDataSource, InjectRepository } from '@nestjs/typeorm';
import { DataSource, EntityManager, Repository } from 'typeorm';
import { PointEntity } from './entities/points.entity';
import {
  CreateManyPointsDto,
  CreatePointDto,
  PointValue,
  TargetName,
} from './dto/create.dto';
import { UserEntity } from 'src/users/entities/user.entity';
import { FeedbacksService } from 'src/feedbacks/feedbacks.service';
import { FeedbackEntity } from 'src/feedbacks/entities/feedback.entity';
import {
  PatientEntity,
  PatientStatus,
} from 'src/patients/entities/patient.entity';

@Injectable()
export class PointsService {
  private readonly logger = new Logger(PointsService.name);

  constructor(
    @InjectRepository(PointEntity)
    private readonly pointsRepository: Repository<PointEntity>,

    private readonly feedbacksService: FeedbacksService,

    @InjectDataSource() private readonly dataSource: DataSource,
  ) {}

  private async getUserOrThrow(userId: string) {
    const user = await this.pointsRepository.manager.findOne(UserEntity, {
      where: { id: userId },
    });
    if (!user) throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return user;
  }

  private async getOrCreatePatientInTx(
    manager: EntityManager,
    phoneNumber: string,
    branch: string,
  ): Promise<PatientEntity | null> {
    if (!phoneNumber) return null;

    // üîé –∏—â–µ–º REGULAR
    let regularPatient = await manager.findOne(PatientEntity, {
      where: { phoneNumber, status: PatientStatus.REGULAR },
    });

    if (regularPatient) {
      // —É–¥–∞–ª—è–µ–º –≤—Å–µ NEW-–¥—É–±–ª–∏–∫–∞—Ç—ã —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º
      await manager.delete(PatientEntity, {
        phoneNumber,
        status: PatientStatus.NEW,
      });

      // –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª–∏–∞–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (regularPatient.branch !== branch) {
        regularPatient.branch = branch;
      }

      return await manager.save(regularPatient);
    }

    // üîé –∏—â–µ–º NEW
    let newPatient = await manager.findOne(PatientEntity, {
      where: { phoneNumber, status: PatientStatus.NEW },
    });

    if (newPatient) {
      newPatient.status = PatientStatus.REGULAR;
      if (newPatient.branch !== branch) {
        newPatient.branch = branch;
      }
      return await manager.save(newPatient);
    }

    // üÜï –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ REGULAR, –Ω–∏ NEW ‚Üí —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
    const patient = manager.create(PatientEntity, {
      phoneNumber,
      branch,
      status: PatientStatus.REGULAR,
    });

    return await manager.save(patient);
  }

  async create(
    dto: CreatePointDto,
    userId: string,
    phoneNumber: string,
  ): Promise<PointEntity> {
    return await this.dataSource.transaction(async (manager) => {
      const user = await this.getUserOrThrow(userId);
      const patient = await this.getOrCreatePatientInTx(
        manager,
        phoneNumber,
        dto.branch,
      );

      let feedback: FeedbackEntity | null = null;
      if (dto.feedback) {
        feedback = await this.feedbacksService.createFeedback(
          dto.feedback,
          userId,
          dto.branch,
          dto.category,
          manager,
        );
      }

      const point = manager.create(PointEntity, {
        ...dto,
        user,
        patient,
        feedback,
      });

      return await manager.save(point);
    });
  }

  async createMany(
    { branch, phoneNumber, points }: CreateManyPointsDto,
    userId: string,
  ): Promise<PointEntity[]> {
    return await this.dataSource.transaction(async (manager) => {
      const user = await this.getUserOrThrow(userId);
      const patient = await this.getOrCreatePatientInTx(
        manager,
        phoneNumber,
        branch,
      );

      const MAX_POINTS = PointValue.FIVE;
      const categories = Object.values(TargetName);
      const map = new Map<string, CreatePointDto>();
      for (const p of points || []) map.set(p.category, p);

      // fill missing categories with default 5
      const completeDtos: CreatePointDto[] = categories.map(
        (category) =>
          map.get(category) ||
          ({
            category: category as TargetName,
            points: MAX_POINTS,
            branch,
          } as CreatePointDto),
      );

      // Optionally create feedbacks per DTO (only when provided)
      const feedbacksByCategory = new Map<string, FeedbackEntity>();
      for (const d of completeDtos) {
        if (d.feedback) {
          const fb = await this.feedbacksService.createFeedback(
            d.feedback,
            userId,
            branch,
            d.category,
            manager,
          );
          feedbacksByCategory.set(d.category, fb);
        }
      }

      const entities = completeDtos.map((d) =>
        manager.create(PointEntity, {
          ...d,
          user,
          patient,
          feedback: feedbacksByCategory.get(d.category) || null,
        }),
      );

      return await manager.save(PointEntity, entities);
    });
  }

  async deleteAll(): Promise<void> {
    try {
      await this.pointsRepository.clear();
      this.logger.log('–í—Å–µ —Ç–æ—á–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
    } catch (e) {
      this.logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫', e?.message || e);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç–æ—á–µ–∫');
    }
  }

  async findAll(): Promise<PointEntity[]> {
    try {
      return await this.pointsRepository.find({
        relations: ['feedback', 'user', 'patient'],
      });
    } catch (e) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫', e?.message || e);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ—á–µ–∫');
    }
  }

  async removeLastFivePoints(): Promise<void> {
    try {
      const lastFive = await this.pointsRepository.find({
        order: { createdAt: 'DESC' },
        take: 5,
      });
      if (!lastFive.length) return;
      await this.pointsRepository.remove(lastFive); // feedback is kept or nulled based on relation onDelete
      this.logger.log('–£–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç–æ—á–µ–∫');
    } catch (e) {
      this.logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Ç–æ—á–µ–∫', e?.message || e);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ—á–µ–∫');
    }
  }
}
