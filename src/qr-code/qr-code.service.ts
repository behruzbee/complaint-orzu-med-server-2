import { Injectable, Logger } from '@nestjs/common';
import { PatientsService } from 'src/patients/patients.service';
import { PatientStatus } from 'src/patients/entities/patient.entity';
import { Client, LocalAuth } from 'whatsapp-web.js';

@Injectable()
export class WhatsappAuthService {
  private readonly logger = new Logger(WhatsappAuthService.name);
  private client: Client | null = null;
  private qrCode: string | null = null;
  private isReady = false;
  private initializing = false;

  constructor(private readonly patientsService: PatientsService) {}

  /** üìå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhatsApp –∫–ª–∏–µ–Ω—Ç–∞ */
  private async initClient() {
    if (this.client || this.initializing) return;

    this.initializing = true;
    this.client = new Client({
      authStrategy: new LocalAuth(),
      webVersionCache: { type: 'none' },
      puppeteer: {
        args: ['--no-sandbox'],
      },
    });

    this.client.on('qr', (qr) => {
      this.qrCode = qr;
      this.isReady = false;
      this.logger.log('üîë –ù–æ–≤—ã–π QR-–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω');
    });

    this.client.on('ready', () => {
      this.isReady = true;
      this.logger.log('‚úÖ WhatsApp –∫–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤');
    });

    this.client.on('disconnected', () => {
      this.logger.warn('‚ö†Ô∏è WhatsApp –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
      this.client = null;
      this.qrCode = null;
      this.isReady = false;
    });

    await this.client.initialize();
    this.initializing = false;
  }

  /** üìå –ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞ */
  async getQrCode(): Promise<{ qr: string | null; isReady: boolean }> {
    await this.initClient();
    return { qr: this.qrCode, isReady: this.isReady };
  }

  /** üìå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞ */
  async disconnect(): Promise<{ disconnected: boolean }> {
    if (this.client) {
      try {
        await this.client.destroy();
        this.logger.log('üîå WhatsApp –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤—Ä—É—á–Ω—É—é');
      } catch (e) {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: ${e.message}`);
      }
    }
    this.client = null;
    this.qrCode = null;
    this.isReady = false;
    this.initializing = false;

    return { disconnected: true };
  }

  /** üîÑ –£–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ */
  private async delay() {
    const ms = Math.floor(Math.random() * (15000 - 8000 + 1)) + 8000;
    this.logger.log(`‚è≥ –ü–∞—É–∑–∞ ${ms / 1000} —Å–µ–∫...`);
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  /** üìå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–∞—Ü–∏–µ–Ω—Ç–∞–º */
  async sendWelcomeMessages() {
    if (!this.client || !this.isReady) {
      throw new Error('‚ùå WhatsApp –∫–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    const patients = await this.patientsService.getPatientsByStatus(
      PatientStatus.NEW,
    );
    let processed = 0;

    const messageUz = `–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º, “≥—É—Ä–º–∞—Ç–ª–∏ –±–µ–º–æ—Ä–∏–º–∏–∑! üå∏  
–ú–µ–Ω ‚Äì Orzu Medical –∫–ª–∏–Ω–∏–∫–∞—Å–∏–¥–∞–Ω –î—É—Ä–¥–æ–Ω–∞.  

–ö–ª–∏–Ω–∏–∫–∞–º–∏–∑–≥–∞ —Ç–∞—à—Ä–∏—Ñ–∏–Ω–≥–∏–∑–¥–∞–Ω –∫–µ–π–∏–Ω —û–∑–∏–Ω–≥–∏–∑–Ω–∏ “õ–∞–Ω–¥–∞–π “≥–∏—Å “õ–∏–ª—è–ø—Å–∏–∑?  
–ë–∏–∑ –∫—û—Ä—Å–∞—Ç–≥–∞–Ω —Ö–∏–∑–º–∞—Ç–ª–∞—Ä —Å–∏–∑–≥–∞ –º–∞—ä“õ—É–ª –±—û–ª–¥–∏–º–∏?  

–°–∏–∑–Ω–∏–Ω–≥ —Ñ–∏–∫—Ä–∏–Ω–≥–∏–∑ –±–∏–∑ —É—á—É–Ω –∂—É–¥–∞ –º—É“≥–∏–º! üíô`;

    const messageKz = `–ê—Å—Å–∞–ª–∞—É–º–∞“ì–∞–ª–µ–π–∫—É–º, “õ“±—Ä–º–µ—Ç—Ç—ñ “õ–æ–Ω–∞“ì—ã–º—ã–∑! üå∏  
–ú–µ–Ω ‚Äì Orzu Medical –∫–ª–∏–Ω–∏–∫–∞—Å—ã–Ω–∞–Ω –î—É—Ä–¥–æ–Ω–∞.  

–ö–ª–∏–Ω–∏–∫–∞–º—ã–∑“ì–∞ –∫–µ–ª–≥–µ–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω ”©–∑—ñ“£—ñ–∑–¥—ñ “õ–∞–ª–∞–π —Å–µ–∑—ñ–Ω—ñ–ø –∂“Ø—Ä—Å—ñ–∑?  
–ë—ñ–∑–¥—ñ“£ “õ—ã–∑–º–µ—Ç—ñ–º—ñ–∑ —Å—ñ–∑–≥–µ “±–Ω–∞–¥—ã –º–∞?  

–°—ñ–∑–¥—ñ“£ –ø—ñ–∫—ñ—Ä—ñ“£—ñ–∑ –±—ñ–∑ “Ø—à—ñ–Ω ”©—Ç–µ –º–∞“£—ã–∑–¥—ã! üíô`;

    for (const p of patients) {
      try {
        const chatId = `${p.phoneNumber}@c.us`;

        await this.client.sendMessage(chatId, messageUz);
        await this.delay();
        await this.client.sendMessage(chatId, messageKz);

        this.logger.log(`‚úÖ –•–∞–±–∞—Ä —é–±–æ—Ä–∏–ª–¥–∏: ${p.lastName} ${p.firstName}`);
        processed++;
      } catch (e) {
        this.logger.error(`‚ùå –•–∞—Ç–æ: ${p.phoneNumber} ‚Üí ${e.message}`);
      }

      await this.delay();
    }

    return { processed, total: patients.length };
  }
}
