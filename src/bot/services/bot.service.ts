import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import axios from 'axios';
import {
  VoiceMessageEntity,
  BotVoiceMessageStatus,
} from '../entities/voice_message.entity';
import {
  TextMessageEntity,
  BotTextMessageStatus,
} from '../entities/text_message.entity';
import { MediaService } from './media.service';
import { PatientsService } from 'src/patients/patients.service';

@Injectable()
export class BotService {
  private readonly logger = new Logger(BotService.name);
  private readonly senderPhoneId = process.env.WHATSAPP_SENDER_PHONE_ID;

  constructor(
    @InjectRepository(VoiceMessageEntity)
    private readonly voiceRepo: Repository<VoiceMessageEntity>,

    @InjectRepository(TextMessageEntity)
    private readonly textRepo: Repository<TextMessageEntity>,

    private readonly mediaService: MediaService,
    private readonly patientsService: PatientsService,
  ) {}

  async handleIncomingMessage(message: any) {
    const from = message.from;

    if (message.type === 'audio') {
      await this.sendTextMessage(
        from,
        'üì• –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.',
      );
      await this.processAudioMessage(message, from);

    } else if (message.type === 'text') {
      await this.processTextMessage(message, from);

    } else if (message.type === 'document') {
      const mimeType = message.document.mime_type || '';
      const fileName = message.document.filename || '';

      if (
        mimeType.includes('spreadsheet') ||
        fileName.endsWith('.xls') ||
        fileName.endsWith('.xlsx')
      ) {
        await this.sendTextMessage(from, 'üì• –ü–æ–ª—É—á–µ–Ω Excel-—Ñ–∞–π–ª. –ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤...');

        try {
          const mediaUrl = await this.mediaService.getMediaUrl(message.document.id);
          const { buffer } = await this.mediaService.downloadMediaBuffer(mediaUrl);

          const result = await this.patientsService.importFromExcel(buffer);
          await this.sendTextMessage(from, `‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: ${result.imported}`);
        } catch (err) {
          await this.sendTextMessage(from, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${err.message}`);
        }
      } else {
        await this.sendTextMessage(from, '‚ö†Ô∏è –§–∞–π–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ Excel.');
      }
    }
  }

  private async processTextMessage(message: any, from: string) {
    const textBody = message.text.body;
    this.logger.log(`üí¨ –¢–µ–∫—Å—Ç –æ—Ç ${from}: ${textBody}`);

    try {
      await this.textRepo.save(
        this.textRepo.create({
          sender: from,
          message: textBody,
          status: BotTextMessageStatus.TEMPORARY,
        }),
      );
      await this.sendTextMessage(from, '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.');
      this.logger.log(`üíæ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.`);
    } catch (err) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: ${err.message}`);
    }
  }

  private async processAudioMessage(message: any, from: string) {
    const mediaId = message.audio.id;
    const duration = message.audio.duration || null;

    this.logger.log(`üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${from}, mediaId=${mediaId}`);

    try {
      const mediaUrl = await this.mediaService.getMediaUrl(mediaId);
      const { buffer, size, mimeType } =
        await this.mediaService.downloadMediaBuffer(mediaUrl);

      await this.voiceRepo.save(
        this.voiceRepo.create({
          mediaId,
          sender: from,
          messageType: 'audio',
          mimeType,
          fileSize: size,
          duration,
          fileData: buffer,
          voiceUrl: `${process.env.API_BASE_URL}/message/voice/${mediaId}/stream`,
          status: BotVoiceMessageStatus.TEMPORARY,
        }),
      );

      await this.sendTextMessage(from, 'üíæ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.');
      this.logger.log(`‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î (${size} bytes)`);
    } catch (err) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: ${err.message}`);
    }
  }

  private async sendTextMessage(to: string, text: string) {
    const url = `https://graph.facebook.com/v22.0/${this.senderPhoneId}/messages`;
    const payload = {
      messaging_product: 'whatsapp',
      to,
      type: 'text',
      text: { body: text },
    };

    try {
      const res = await axios.post(url, payload, {
        headers: {
          Authorization: `Bearer ${process.env.WHATSAPP_WEBHOOK_ACCESS_TOKEN}`,
          'Content-Type': 'application/json',
        },
      });
      this.logger.log(
        `üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${to} ‚Üí ${JSON.stringify(res.data)}`,
      );
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.response?.status} ${JSON.stringify(error.response?.data)}`,
      );
    }
  }
}
