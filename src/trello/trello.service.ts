import { BadRequestException, Injectable, InternalServerErrorException, Logger } from '@nestjs/common';
import axios from 'axios';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { TextMessageEntity } from 'src/bot/entities/text_message.entity';
import { VoiceMessageEntity } from 'src/bot/entities/voice_message.entity';
import { TrelloCardEntity } from './entities/trello.entity';
import { FeedbackEntity } from 'src/feedbacks/entities/feedback.entity';

@Injectable()
export class TrelloService {
  private readonly logger = new Logger(TrelloService.name);
  private readonly key = process.env.TRELLO_KEY!;
  private readonly token = process.env.TRELLO_TOKEN!;
  private readonly boardId = process.env.TRELLO_BOARD_ID!;
  private readonly baseUrl = 'https://api.trello.com/1';

  constructor(
    @InjectRepository(TrelloCardEntity)
    private readonly trelloCardRepo: Repository<TrelloCardEntity>,

    @InjectRepository(FeedbackEntity)
    private readonly feedbackRepo: Repository<FeedbackEntity>,

    @InjectRepository(TextMessageEntity)
    private readonly textRepo: Repository<TextMessageEntity>,

    @InjectRepository(VoiceMessageEntity)
    private readonly voiceRepo: Repository<VoiceMessageEntity>,
  ) {}

  private authParams() {
    return `key=${this.key}&token=${this.token}`;
  }

  // 1) –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–æ—Å–∫–∏ ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π (–ø–æ—Ä—è–¥–æ–∫ Trello)
  private async getBoardLists() {
    const url = `${this.baseUrl}/boards/${this.boardId}/lists?${this.authParams()}`;
    const res = await axios.get(url);
    return res.data; // –º–∞—Å—Å–∏–≤ —Å–ø–∏—Å–∫–æ–≤
  }

  // 2) Ensure label exists on board ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º id label
  private async ensureLabel(boardId: string, labelName: string) {
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∫–∏
    const urlLabels = `${this.baseUrl}/boards/${boardId}/labels?${this.authParams()}`;
    const existing = (await axios.get(urlLabels)).data as any[];

    const found = existing.find(l => l.name === labelName);
    if (found) return found.id;

    // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë–º (—Ü–≤–µ—Ç –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –ø—É—Å—Ç–æ–π)
    const createUrl = `${this.baseUrl}/labels?${this.authParams()}&idBoard=${boardId}&name=${encodeURIComponent(
      labelName,
    )}&color=blue`;
    const created = (await axios.post(createUrl)).data as any;
    return created.id;
  }

  // 3) –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è feedback (–Ω–∞ –ø–µ—Ä–≤–æ–º –ª–∏—Å—Ç–µ)
  async createCardForFeedback(
  feedback: FeedbackEntity,
  branch: string,
  category: string
) {
  if (!feedback) {
    throw new BadRequestException('Feedback not found');
  }

  const lists = await this.getBoardLists();
  if (!lists?.length) {
    throw new InternalServerErrorException('No lists found on Trello board');
  }
  const firstList = lists[0];

  const labelId = await this.ensureLabel(this.boardId, branch);

  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É
  const patientName = `${feedback.firstName ?? ''} ${feedback.lastName ?? ''}`.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  const phone = feedback.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω';
  const status = feedback.status || '–ù–µ —É–∫–∞–∑–∞–Ω';
  const createdDate = feedback.createdAt?.toLocaleString('ru-RU', { timeZone: 'Asia/Tashkent' }) || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';

  const textMessages =
    feedback.messages?.length
      ? feedback.messages.map((m, i) => `${i + 1}. ${m.message}`).join('\n')
      : '–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞';

  const voiceMessages =
  feedback.voices?.length
    ? feedback.voices
        .map((voice, i) => `[üîä –ê—É–¥–∏–æ ${i + 1}](${voice.url})`)
        .join('\n')
    : '';

  const description = [
    'üìã –ñ–∞–ª–æ–±–∞ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞',
    '',
    `üë§ –§–ò–û: ${patientName}`,
    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`,
    `üè• –§–∏–ª–∏–∞–ª: ${branch}`,
    `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${feedback.category}`,
    `üóÇÔ∏è –°—Ç–∞—Ç—É—Å: ${status}`,
    '',
    'üìù –¢–µ–∫—Å—Ç:',
    textMessages,
    '',
    voiceMessages,
    '',
    `üìÖ –î–∞—Ç–∞: ${createdDate}`,
  ]
    .filter(Boolean) // —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    .join('\n');

  const createCardUrl = `${this.baseUrl}/cards?${this.authParams()}`;

  try {
    const { data: createdCard } = await axios.post(createCardUrl, {
      idList: firstList.id,
      name: `${branch} ‚Äî ${feedback.category}`,
      desc: description,
      idLabels: labelId,
    });

    const trelloCard = this.trelloCardRepo.create({
      trelloCardId: createdCard.id,
      listId: firstList.id,
      boardId: this.boardId,
      feedback,
    });
    await this.trelloCardRepo.save(trelloCard);

    this.logger.log(`‚úÖ Trello card created: ${createdCard.id} for feedback ${feedback.id}`);
    return createdCard;
  } catch (error) {
    this.logger.error(`‚ùå Failed to create Trello card for feedback ${feedback.id}`, error);
    throw new InternalServerErrorException('Error while creating Trello card');
  }
}


  // 4) –í–æ—Å—Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É (restore) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ webhook —Å–æ–æ–±—â–∞–µ—Ç –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
  async recreateCardFromPayload(cardData: any) {
    // cardData –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ webhook action.data.card
    const name = cardData.name || 'Restored card';
    const desc = cardData.desc || `Restored: ${new Date().toISOString()}`;
    // –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ label –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é branch: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ payload ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ label
    const lists = await this.getBoardLists();
    const firstList = lists[0];

    const createCardUrl = `${this.baseUrl}/cards?${this.authParams()}&idList=${firstList.id}&name=${encodeURIComponent(
      name,
    )}&desc=${encodeURIComponent(desc)}`;
    const created = (await axios.post(createCardUrl)).data as any;

    // –ø–æ–ø—ã—Ç–∫–∞ —Å–≤—è–∑–∞—Ç—å —Å feedback –ø–æ shortLink –∏–ª–∏ name (–µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ feedbackId) ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    this.logger.log(`Trello card recreated: ${created.id}`);
    return created;
  }

  // 5) –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook payload –æ—Ç Trello
  async handleWebhook(payload: any) {
    const action = payload?.action;
    if (!action) return { ok: true };

    const type = action.type;
    this.logger.log(`Trello webhook action: ${type}`);

    try {
      if (type === 'updateCard') {
        const listAfter = action.data?.listAfter;
        const card = action.data?.card;
        if (listAfter && card) {
          // –Ω–∞–π—Ç–∏ trelloCardEntity –ø–æ trelloCardId
          const mapping = await this.trelloCardRepo.findOne({
            where: { trelloCardId: card.id },
            relations: ['feedback'],
          });
          // –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∏ —Å—Ç–∞—Ç—É—Å feedback
          if (mapping) {
            mapping.listId = listAfter.id;
            await this.trelloCardRepo.save(mapping);

            // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å feedback –Ω–∞ –∏–º—è –ª–∏—Å—Ç–∞
            if (mapping.feedback) {
              mapping.feedback.status = listAfter.name;
              await this.feedbackRepo.save(mapping.feedback);
              this.logger.log(`Feedback ${mapping.feedback.id} status updated to ${listAfter.name}`);
            }
          }
        }
      } else if (type === 'deleteCard' || (type === 'removeCardFromBoard')) {
        // –≤ webhook Trello –º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å —ç–∫—à–Ω –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        const card = action.data?.card;
        if (card) {
          // –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
          const recreated = await this.recreateCardFromPayload(card);
          // –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å mapping ‚Äî –æ–±–Ω–æ–≤–∏–º –µ–≥–æ
          const mapping = await this.trelloCardRepo.findOne({ where: { trelloCardId: card.id } });
          if (mapping) {
            mapping.trelloCardId = recreated.id;
            mapping.listId = recreated.idList || mapping.listId;
            await this.trelloCardRepo.save(mapping);
            this.logger.log(`Mapping for feedback updated after recreate. new card: ${recreated.id}`);
          }
        }
      } else if (type === 'createCard') {
        // –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞—Ç—å, –µ—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –µ—Å—Ç—å feedbackId
        const card = action.data?.card;
        const desc = card?.desc || '';
        const m = desc.match(/feedbackId:([a-f0-9-]+)/i);
        if (m) {
          const feedbackId = m[1];
          const feedback = await this.feedbackRepo.findOne({ where: { id: feedbackId } });
          if (feedback) {
            const mapping = this.trelloCardRepo.create({
              trelloCardId: card.id,
              listId: action.data.list?.id || null,
              boardId: this.boardId,
              feedback,
            });
            await this.trelloCardRepo.save(mapping);
            this.logger.log(`Created mapping for existing card ${card.id} -> feedback ${feedbackId}`);
          }
        }
      }
    } catch (err) {
      this.logger.error('Error handling Trello webhook', err);
    }

    return { ok: true };
  }

  // 6) –†—É—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —É–¥–∞–ª–∏—Ç—å (soft) –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –≤ API Trello —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç
  async restoreCardByFeedback(feedbackId: string) {
    const mapping = await this.trelloCardRepo.findOne({
      where: { feedback: { id: feedbackId } },
      relations: ['feedback'],
    });
    if (!mapping) throw new Error('Mapping not found');

    // –ü–æ–ø—Ä–æ–±—É–µ–º "unarchive" –∫–∞—Ä—Ç–æ—á–∫—É: POST /1/cards/{idCard}/closed?value=false
    try {
      const url = `${this.baseUrl}/cards/${mapping.trelloCardId}?${this.authParams()}`;
      // –ø–æ–ª—É—á–∏–º –∫–∞—Ä—Ç–æ—á–∫—É ‚Äî –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç, –≤–æ—Å—Å–æ–∑–¥–∞—ë–º
      const resp = await axios.get(url);
      if (resp && resp.data) {
        // –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ closed=true => –æ—Ç–∫—Ä–æ–µ–º
        if (resp.data.closed) {
          await axios.put(`${this.baseUrl}/cards/${mapping.trelloCardId}/closed?${this.authParams()}&value=false`);
          this.logger.log(`Card ${mapping.trelloCardId} unarchived`);
          return resp.data;
        }
        return resp.data;
      }
    } catch (err) {
      // –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ—Ç - –≤–æ—Å—Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É
      const recreated = await this.recreateCardFromPayload({ name: `Restored for feedback ${feedbackId}`, desc: `feedbackId:${feedbackId}` });
      mapping.trelloCardId = recreated.id;
      mapping.listId = recreated.idList || mapping.listId;
      await this.trelloCardRepo.save(mapping);
      return recreated;
    }
  }
}
