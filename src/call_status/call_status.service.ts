import {
  Injectable,
  InternalServerErrorException,
  NotFoundException,
  Logger,
} from '@nestjs/common';
import { CreateCallStatusDto } from './dto/create.dto';
import { EntityManager, Repository, DataSource } from 'typeorm';
import { CallStatusEntity } from './entities/call_status.entity';
import { InjectDataSource, InjectRepository } from '@nestjs/typeorm';
import { UserEntity } from 'src/users/entities/user.entity';
import {
  PatientEntity,
  PatientStatus,
} from 'src/patients/entities/patient.entity';

@Injectable()
export class CallStatusService {
  private readonly logger = new Logger(CallStatusService.name);

  constructor(
    @InjectRepository(CallStatusEntity)
    private readonly callStatusRepository: Repository<CallStatusEntity>,
    @InjectRepository(UserEntity)
    private readonly userRepository: Repository<UserEntity>,
    @InjectDataSource()
    private readonly dataSource: DataSource,
  ) {}

  async getAll() {
    try {
      return await this.callStatusRepository.find({
        relations: ['user', 'patient'],
        order: { createdAt: 'DESC' },
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–≤–æ–Ω–∫–æ–≤', error.stack);
      throw new InternalServerErrorException(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–≤–æ–Ω–∫–æ–≤',
      );
    }
  }

  private async getUserOrThrow(userId: string): Promise<UserEntity> {
    const user = await this.userRepository.findOneBy({ id: userId });
    if (!user) {
      this.logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${userId}`);
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    return user;
  }

  /**
   * üìå –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  private async getOrCreatePatientInTx(
    manager: EntityManager,
    phoneNumber: string,
    branch: string,
  ): Promise<PatientEntity | null> {
    if (!phoneNumber) return null;

    let patient = await manager.findOne(PatientEntity, {
      where: { phoneNumber },
    });

    console.log(patient)
    console.log(phoneNumber)

    if (patient) {
      if (patient.status === PatientStatus.NEW) {
        patient.status = PatientStatus.REGULAR;
      }
      if (patient.branch !== branch) {
        patient.branch = branch;
      }
      return await manager.save(patient);
    }

    patient = manager.create(PatientEntity, {
      phoneNumber,
      branch,
      status: PatientStatus.REGULAR,
    });


    return await manager.save(patient);
  }

  async create(
    callStatusDto: CreateCallStatusDto,
    userId: string,
  ): Promise<CallStatusEntity> {
    const { phoneNumber, branch, status } = callStatusDto;

    return await this.dataSource.transaction(async (manager) => {
      try {
        const user = await this.getUserOrThrow(userId);

        const patient = await this.getOrCreatePatientInTx(
          manager,
          phoneNumber,
          branch,
        );

        const newStatus = manager.create(CallStatusEntity, {
          status,
          phoneNumber,
          branch,
          user,
          patient,
        });

        const saved = await manager.save(newStatus);

        this.logger.log(
          `–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π call status ${saved.id} –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ ${phoneNumber}`,
        );

        return saved;
      } catch (error) {
        this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞', error.stack);
        throw new InternalServerErrorException(
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞',
        );
      }
    });
  }

  async deleteLast(): Promise<{ message: string }> {
    try {
      const lastStatus = await this.callStatusRepository.findOne({
        order: { createdAt: 'DESC' },
        relations: ['user', 'patient'],
      });

      if (!lastStatus) {
        throw new NotFoundException('–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      }

      await this.callStatusRepository.remove(lastStatus);
      this.logger.log(`–£–¥–∞–ª—ë–Ω call status ${lastStatus.id}`);
      return { message: '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω' };
    } catch (error) {
      this.logger.error(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞',
        error.stack,
      );
      if (error instanceof NotFoundException) throw error;
      throw new InternalServerErrorException(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞',
      );
    }
  }
}
