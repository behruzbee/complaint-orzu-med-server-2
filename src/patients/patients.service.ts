import {
  Injectable,
  BadRequestException,
  InternalServerErrorException,
  NotFoundException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, In } from 'typeorm';
import { PatientEntity, PatientStatus } from './entities/patient.entity';
import * as XLSX from 'xlsx';
import stringSimilarity from 'string-similarity';
import { CreatePatientDto } from './dto/create.dto';
import { Branches } from 'src/points/dto/create.dto';

type ImportReport = {
  totalRows: number;
  detectedHeaderAt: number | null;
  imported: number;
  skippedDuplicates: number;
  errors: Array<{ line: number; reason: string }>;
};

@Injectable()
export class PatientsService {
  constructor(
    @InjectRepository(PatientEntity)
    private readonly patientRepository: Repository<PatientEntity>,
  ) {}

  /**
   * üìå –ò–º–ø–æ—Ä—Ç –∏–∑ Excel c ¬´–ø–æ–∫–∞-–π–æ–∫–µ¬ª
   * - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏-–¥–∞—Ç—ã (12,08,2025 / 12.08.2025 / 12/08/2025 / excel-serial)
   * - –¢–µ–ª–µ—Ñ–æ–Ω: —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–µ –Ω–æ–º–µ—Ä–∞; 8*********** ‚Üí 7*********** (KZ)
   * - –§–∞–º–∏–ª–∏—è –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ (—Ä–∞–∑–±–æ—Ä ¬´–ò–º—è –∏ –§–∞–º–∏–ª–∏—è¬ª)
   * - –§–∏–ª–∏–∞–ª –∏—â–µ—Ç—Å—è –ø–æ best match —Å—Ä–µ–¥–∏ Branches
   * - –û—à–∏–±–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è, –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
   */
  async importFromExcel(fileBuffer: Buffer): Promise<ImportReport> {
    try {
      const workbook = XLSX.read(fileBuffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      const rows: any[][] = XLSX.utils.sheet_to_json(
        workbook.Sheets[sheetName],
        {
          header: 1,
          raw: true,
          defval: '',
        },
      );

      if (!rows.length) {
        throw new BadRequestException('–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª');
      }

      // 1) –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –∏–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤
      const headerIndex = this.findHeaderRowIndex(rows);
      if (headerIndex === -1) {
        throw new BadRequestException(
          '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏. –û–∂–∏–¥–∞—é—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∏: "–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–§–∏–ª–∏–∞–ª" (–¥–æ–ø—É—Å—Ç–∏–º—ã –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤—Ä–æ–¥–µ "–ò–º—è –∏ –§–∞–º–∏–ª–∏—è", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", –∏ —Ç.–ø.).',
        );
      }

      const headerRow = rows[headerIndex].map((v) => String(v).trim());
      const colIdx = this.mapHeaderIndices(headerRow);

      // 2) –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ö–æ–¥: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä–æ–∫-–¥–∞—Ç–∞
      let currentCheckoutISO: string | null = null;
      const errors: ImportReport['errors'] = [];
      const toCreate: PatientEntity[] = [];
      const seenInFile = new Set<string>(); // –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞

      for (let i = headerIndex + 1; i < rows.length; i++) {
        const lineNumber = i + 1; // –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ (1-based)
        const row = rows[i];

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (!row || row.every((c) => String(c).trim() === '')) continue;

        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞-–¥–∞—Ç–∞ (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
        if (this.isDateSeparatorRow(row)) {
          const parsed = this.parseAsISODate(row);
          if (parsed) {
            currentCheckoutISO = parsed;
            continue; // –Ω–µ –ø–∞—Ü–∏–µ–Ω—Ç, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
          }
        }

        // –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
        const rawName =
          colIdx.name !== -1 ? String(row[colIdx.name] ?? '').trim() : '';
        const rawPhone =
          colIdx.phone !== -1 ? String(row[colIdx.phone] ?? '').trim() : '';
        const rawBranch =
          colIdx.branch !== -1 ? String(row[colIdx.branch] ?? '').trim() : '';

        // –í–∞–ª–∏–¥–∞—Ü–∏–∏ & –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        if (!rawPhone) {
          errors.push({
            line: lineNumber,
            reason: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
          });
          continue;
        }

        const phoneNumber = this.normalizePhone(rawPhone);
        if (!phoneNumber.ok) {
          errors.push({ line: lineNumber, reason: phoneNumber.error! });
          continue;
        }

        if (!rawName) {
          errors.push({ line: lineNumber, reason: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è' });
          continue;
        }

        const { firstName, lastName } = this.splitName(rawName);

        if (!rawBranch) {
          errors.push({ line: lineNumber, reason: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª–∏–∞–ª' });
          continue;
        }

        let branch: string;
        try {
          branch = this.normalizeBranch(rawBranch, lineNumber);
        } catch (e: any) {
          errors.push({
            line: lineNumber,
            reason: e?.message || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª',
          });
          continue;
        }

        const key = `${phoneNumber.value}__${currentCheckoutISO ?? ''}`;
        if (seenInFile.has(key)) {
          continue;
        }
        seenInFile.add(key);

        const entity = this.patientRepository.create();

        toCreate.push(entity);
      }

      // 3) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è) –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å –ë–î –ø–æ –ø–∞—Ä–µ (phoneNumber, checkOutTime)
      //    –ß—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–æ–≤–ø–∞–¥—É—Ç
      if (toCreate.length > 0) {
        const phones = Array.from(new Set(toCreate.map((p) => p.phoneNumber)));
        const existing = await this.patientRepository.find({
          where: { phoneNumber: In(phones) },
          select: ['id', 'phoneNumber', 'checkOutTime'],
        });

        const existingKeys = new Set(
          existing.map((e) => `${e.phoneNumber}__${e.checkOutTime ?? ''}`),
        );

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        const filtered = toCreate.filter(
          (p) => !existingKeys.has(`${p.phoneNumber}__${p.checkOutTime ?? ''}`),
        );
        const skippedDuplicates = toCreate.length - filtered.length;

        // 4) –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–º–∏–Ω–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤)
        //    –ú–æ–∂–Ω–æ –µ—â—ë –¥—Ä–æ–±–∏—Ç—å –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 1000 –ø—Ä–∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
        if (filtered.length > 0) {
          await this.patientRepository.save(filtered, { chunk: 500 });
        }

        const report: ImportReport = {
          totalRows: rows.length,
          detectedHeaderAt: headerIndex + 1,
          imported: filtered.length,
          skippedDuplicates,
          errors,
        };

        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –Ω–æ —á—Ç–æ-—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—á—ë—Ç –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        // –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ 0 –∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ ‚Äî –º–æ–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å 400 –¥–ª—è –∂—ë—Å—Ç–∫–æ–≥–æ —Ñ–µ–π–ª–∞
        if (report.imported === 0 && errors.length > 0) {
          throw new BadRequestException(
            `–ò–º–ø–æ—Ä—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –û—à–∏–±–æ–∫: ${errors.length}. –ü—Ä–∏–º–µ—Ä: ${errors[0].reason} (—Å—Ç—Ä–æ–∫–∞ ${errors[0].line}).`,
          );
        }

        return report;
      }

      // –ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
      return {
        totalRows: rows.length,
        detectedHeaderAt: headerIndex + 1,
        imported: 0,
        skippedDuplicates: 0,
        errors: [
          {
            line: headerIndex + 2,
            reason: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤',
          },
        ],
      };
    } catch (err: any) {
      if (
        err instanceof BadRequestException ||
        err instanceof NotFoundException
      ) {
        throw err;
      }
      throw new InternalServerErrorException(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${err.message}`,
      );
    }
  }

  // ---------- –•–µ–ª–ø–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∞ ----------

  /** –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–≥–∏–±–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è) */
  private findHeaderRowIndex(rows: any[][]): number {
    const headerLike = (cell: string) =>
      /–∏–º—è|—Ñ–∞–º–∏–ª/i.test(cell) ||
      /—Ç–µ–ª–µ—Ñ–æ–Ω|–Ω–æ–º–µ—Ä/i.test(cell) ||
      /—Ñ–∏–ª–∏–∞–ª/i.test(cell);

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const matches = row.filter((c) => headerLike(String(c))).length;
      if (matches >= 2) return i; // –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∏–∑ 3-—Ö –Ω–∞—à–ª–∏
    }
    return -1;
  }

  /** –ú–∞–ø–ø–∏–Ω–≥ –∏–Ω–¥–µ–∫—Å–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º */
  private mapHeaderIndices(headerRow: string[]): {
    name: number;
    phone: number;
    branch: number;
  } {
    const findIdx = (needles: RegExp[]) =>
      headerRow.findIndex((h) =>
        needles.some((re) => re.test(h.toLowerCase())),
      );

    const name = findIdx([/–∏–º—è/i, /—Ñ–∞–º–∏–ª/i, /–∏–º—è.*—Ñ–∞–º–∏–ª/i, /—Ñ–∏–æ/i]);
    const phone = findIdx([/—Ç–µ–ª–µ—Ñ–æ–Ω/i, /–Ω–æ–º–µ—Ä/i, /phone/i]);
    const branch = findIdx([/—Ñ–∏–ª–∏–∞–ª/i, /branch/i]);

    return { name, phone, branch };
  }

  /** –†—è–¥ —è–≤–ª—è–µ—Ç—Å—è ¬´—Å—Ç—Ä–æ–∫–æ–π-–¥–∞—Ç–æ–π¬ª, –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ 1 —è—á–µ–π–∫–∞ –∏ –æ–Ω–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –¥–∞—Ç—É, –ª–∏–±–æ —ç—Ç–æ excel-serial */
  private isDateSeparatorRow(row: any[]): boolean {
    const nonEmpty = row.map((c) => String(c).trim()).filter((v) => v !== '');
    if (nonEmpty.length !== 1) return false;

    const value = nonEmpty[0];

    if (this.parseAsISODate([value])) return true;

    // excel serial number (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ)
    if (/^\d+$/.test(value)) {
      const num = Number(value);
      return num > 25000 && num < 80000; // —Ä–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è excel –¥–∞—Ç
    }
    return false;
  }

  /** –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –≤ ISO (YYYY-MM-DD) */
  private parseAsISODate(row: any[]): string | null {
    const nonEmpty = row.map((c) => String(c).trim()).filter((v) => v !== '');
    if (nonEmpty.length !== 1) return null;
    let v = nonEmpty[0];

    // Excel serial date
    if (/^\d+$/.test(v)) {
      const serial = Number(v);
      // 25569 ‚Äî 1970-01-01; excel day ‚Üí JS ms
      const date = new Date(Math.round((serial - 25569) * 86400 * 1000));
      if (!isNaN(date.getTime())) return date.toISOString().slice(0, 10);
    }

    // –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    v = v.replace(/[,\.\s]/g, '/'); // 12,08,2025 ‚Üí 12/08/2025
    const m = v.match(/^(\d{1,2})\/(\d{1,2})\/(\d{2,4})$/);
    if (!m) return null;

    let [_, d, mo, y] = m;
    if (y.length === 2) y = Number(y) < 50 ? `20${y}` : `19${y}`;

    const day = Number(d);
    const mon = Number(mo);
    const year = Number(y);
    const date = new Date(Date.UTC(year, mon - 1, day));
    if (isNaN(date.getTime())) return null;
    return date.toISOString().slice(0, 10);
  }

  /** –ò–º—è + (–Ω–µ–æ–±—è–∑.) —Ñ–∞–º–∏–ª–∏—è */
  private splitName(full: string): {
    firstName: string;
    lastName: string | null;
  } {
    const parts = full
      .split(/\s+/)
      .map((s) => s.trim())
      .filter(Boolean);
    if (parts.length === 0) return { firstName: '', lastName: null };
    if (parts.length === 1) return { firstName: parts[0], lastName: null };
    return { firstName: parts[0], lastName: parts.slice(1).join(' ') };
  }

  /** –¢–µ–ª–µ—Ñ–æ–Ω: —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–µ –Ω–æ–º–µ—Ä–∞. 8xxxxxxxxxxx ‚Üí 7xxxxxxxxxxx (KZ) */
  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –°–ù–ì/–°—Ä–µ–¥–Ω–µ–π –ê–∑–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç E.164
   */
  private normalizePhone(
    input: string,
  ): { ok: true; value: string } | { ok: false; error: string } {
    let raw = input.replace(/\s|\(|\)|-|_/g, '').trim(); // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã

    if (!raw) return { ok: false, error: '–ü—É—Å—Ç–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' };

    // 1) –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8 –∏ –¥–ª–∏–Ω–∞ >= 10 ‚Üí —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫–∞–∫ "–º–µ—Å—Ç–Ω—ã–π" -> –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7...
    if (raw.startsWith('8') && raw.length >= 10) {
      raw = '+7' + raw.slice(1);
    }

    // 2) –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 (–±–µ–∑ –ø–ª—é—Å–∞) ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º +
    if (/^7\d{9,}$/.test(raw)) {
      raw = '+' + raw;
    }

    // 3) –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 9 –∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω (UZ, KG, TJ, TM, AZ, AM, GE, UA, etc.)
    const knownCodes = ['998', '996', '992', '993', '994', '995', '374', '380'];
    for (const code of knownCodes) {
      if (raw.startsWith(code)) {
        raw = '+' + raw;
        break;
      }
    }

    // 4) –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "+" ‚Üí –æ—Å—Ç–∞–≤–ª—è–µ–º
    if (!raw.startsWith('+')) {
      return {
        ok: false,
        error: `–ù–æ–º–µ—Ä "${input}" –Ω–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ`,
      };
    }

    // 5) –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (E.164: –º–∞–∫—Å–∏–º—É–º 15 —Ü–∏—Ñ—Ä, –º–∏–Ω–∏–º—É–º 10)
    const digits = raw.replace(/\D/g, '');
    if (digits.length < 10 || digits.length > 15) {
      return {
        ok: false,
        error: `–ù–æ–º–µ—Ä "${input}" –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É (${digits.length} —Ü–∏—Ñ—Ä)`,
      };
    }

    return { ok: true, value: raw };
  }

  /** –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª–∏–∞–ª–∞ —á–µ—Ä–µ–∑ best-match —Å—Ä–µ–¥–∏ Branches */
  private normalizeBranch(inputBranch: string, lineNumber: number): string {
    const branchList = Object.values(Branches).map((b) => String(b).trim());
    const query = inputBranch.trim();

    const { bestMatch, bestMatchIndex } = stringSimilarity.findBestMatch(
      query.toLowerCase(),
      branchList.map((b) => b.toLowerCase()),
    );

    if (bestMatch.rating < 0.6) {
      throw new BadRequestException(
        `–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${lineNumber}: —Ñ–∏–ª–∏–∞–ª "${inputBranch}" –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω`,
      );
    }

    return branchList[bestMatchIndex];
  }

  // ---------- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π/—Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∫–∞–º–∏) ----------

  async addPatientManually(
    patientDto: CreatePatientDto,
  ): Promise<PatientEntity> {
    const { firstName, lastName, phoneNumber, branch } = patientDto;

    const phone = this.normalizePhone(phoneNumber);
    if (!phone.ok) throw new BadRequestException(phone.error);

    const entity = this.patientRepository.create({
      firstName,
      lastName,
      phoneNumber: phone.value,
      branch: this.normalizeBranch(branch, 0),
      status: PatientStatus.NEW,
    });

    return await this.patientRepository.save(entity);
  }

  async getPatientsByStatus(status: PatientStatus) {
    return this.patientRepository.find({
      where: { status },
      relations: [
        'feedbacks',
        'feedbacks.messages',
        'feedbacks.voices',
        'feedbacks.point',
        'feedbacks.user',
      ],
    });
  }

  async getPatientById(id: string) {
    const patient = await this.patientRepository.findOne({
      where: { id },
      relations: [
        'feedbacks',
        'feedbacks.messages',
        'feedbacks.voices',
        'feedbacks.point',
        'feedbacks.user',
      ],
    });

    if (!patient) {
      throw new NotFoundException(`–ü–∞—Ü–∏–µ–Ω—Ç —Å id=${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    return patient;
  }

  async deletePatient(id: string): Promise<{ deleted: boolean }> {
    const result = await this.patientRepository.delete(id);
    if (result.affected === 0) {
      throw new NotFoundException(`–ü–∞—Ü–∏–µ–Ω—Ç —Å id=${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    return { deleted: true };
  }
}
